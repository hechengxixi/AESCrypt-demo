
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import java.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.spec.IvParameterSpec;

//import org.apache.commons.codec.binary.Base64;


public class Encrypt {
	
	public static String digest(String data) {
        String digest="";
        try {
             java.security.MessageDigest alg=java.security.MessageDigest.getInstance("MD5");
             alg.update(data.getBytes());
             byte[] digesta=alg.digest();
             digest=byte2hex(digesta);
             return digest;
        } catch (Exception ex) {
            return (null);
        }
    }
    public static String byte2hex(byte[] b) //二行制转字符串
    {
     String hs="";
     String stmp="";
     for (int n=0;n<b.length;n++)
      {
       stmp=(java.lang.Integer.toHexString(b[n] & 0XFF));
       if (stmp.length()==1) hs=hs+"0"+stmp;
       else hs=hs+stmp;
       if (n<b.length-1)  hs=hs+"";
      }
     return hs.toUpperCase();
    }
    
    public static String decrypt(String sSrc, String sKey) throws Exception {    
        try {    
            // 判断Key是否正确    
            if (sKey == null) {    
                System.out.print("Key为空null");      
                return null;    
            }    
            // 判断Key是否为16位    
            if (sKey.length() != 16) {    
                System.out.print("Key长度不是16位");    
                return null;    
            }    
            byte[] raw = sKey.getBytes("UTF-8");    
            SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");    
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");    
            IvParameterSpec iv = new IvParameterSpec("0102030405060709"    
                    .getBytes());    
            cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);    
            byte[] encrypted1 = base64Decode(sSrc);//先用bAES64解密    
            try {    
                byte[] original = cipher.doFinal(encrypted1);    
                String originalString = new String(original);    
                return originalString;    
            } catch (Exception e) {    
                System.out.println(e.toString());    
                return null;    
            }    
        } catch (Exception ex) {    
            System.out.println(ex.toString());    
            return null;    
        }    
    }    
    
    static byte[] base64Decode(String value) {
    	byte[] decodedValue = Base64.getDecoder().decode(value);
        return decodedValue;  
    }
    
    /**将16进制转换为二进制
     * @param hexStr
     * @return
     */
    public static byte[] parseHexStr2Byte(String hexStr) {
            if (hexStr.length() < 1)
                    return null;
            byte[] result = new byte[hexStr.length()/2];
            for (int i = 0;i< hexStr.length()/2; i++) {
                    int high = Integer.parseInt(hexStr.substring(i*2, i*2+1), 16);
                    int low = Integer.parseInt(hexStr.substring(i*2+1, i*2+2), 16);
                    result[i] = (byte) (high * 16 + low);
            }
            return result;
    }


   /* public static void main(String[] args) {
        try {
            String str ="123456";
            String enStr = digest(str);
            System.out.println(enStr);
            //System.out.println(decrypt(enStr));
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }*/

    public static void main(String[] args) throws Exception  {
    	
        System.out.println(Encrypt.decrypt("oM8yv4/bcYxXUcCqZQtR6w==", "0102030405060708")); // output: test

      }

	

}
